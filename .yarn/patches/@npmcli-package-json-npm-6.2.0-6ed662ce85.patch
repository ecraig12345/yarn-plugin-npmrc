diff --git a/lib/index.js b/lib/index.js
index 7eff602d73a3f5650ed90ccd9ed3b04a6c0114fe..864cddc47334b326f989c2278e5e8aecb37d0fda 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -5,7 +5,6 @@ const parseJSON = require('json-parse-even-better-errors')
 const updateDeps = require('./update-dependencies.js')
 const updateScripts = require('./update-scripts.js')
 const updateWorkspaces = require('./update-workspaces.js')
-const normalize = require('./normalize.js')
 const { read, parse } = require('./read-package.js')
 const { packageSort } = require('./sort.js')
 
@@ -25,50 +24,6 @@ const knownKeys = new Set([
 ])
 
 class PackageJson {
-  static normalizeSteps = Object.freeze([
-    '_id',
-    '_attributes',
-    'bundledDependencies',
-    'bundleDependencies',
-    'optionalDedupe',
-    'scripts',
-    'funding',
-    'bin',
-  ])
-
-  // npm pkg fix
-  static fixSteps = Object.freeze([
-    'binRefs',
-    'bundleDependencies',
-    'bundleDependenciesFalse',
-    'fixName',
-    'fixNameField',
-    'fixVersionField',
-    'fixRepositoryField',
-    'fixDependencies',
-    'devDependencies',
-    'scriptpath',
-  ])
-
-  static prepareSteps = Object.freeze([
-    '_id',
-    '_attributes',
-    'bundledDependencies',
-    'bundleDependencies',
-    'bundleDependenciesDeleteFalse',
-    'gypfile',
-    'serverjs',
-    'scriptpath',
-    'authors',
-    'readme',
-    'mans',
-    'binDir',
-    'gitHead',
-    'fillTypes',
-    'normalizeData',
-    'binRefs',
-  ])
-
   // create a new empty package.json, so we can save at the given path even
   // though we didn't start from a parsed file
   static async create (path, opts = {}) {
@@ -261,24 +216,21 @@ class PackageJson {
 
   async normalize (opts = {}) {
     if (!opts.steps) {
-      opts.steps = this.constructor.normalizeSteps
+      opts.steps = {}
     }
-    await normalize(this, opts)
     return this
   }
 
   async prepare (opts = {}) {
     if (!opts.steps) {
-      opts.steps = this.constructor.prepareSteps
+      opts.steps = {}
     }
-    await normalize(this, opts)
     return this
   }
 
   async fix (opts = {}) {
     // This one is not overridable
-    opts.steps = this.constructor.fixSteps
-    await normalize(this, opts)
+    opts.steps = {}
     return this
   }
 }
